{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","robots.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","image","id","className","style","backgroundImage","CardList","robots","map","user","i","key","character","actor","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","filterRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.731da017.chunk.js","sourcesContent":["import React from 'react';\nimport './Components.css';\n\nconst Card = ({name, email, id, image}) => {\n  return (\n    <div className=\"tc bg-near-black dib br3 ma2 grow bw2 shadow-5 Main-card\" style={{backgroundImage: `url(${image})`}}>\n      <div className=\"Main-img\"></div>\n      <div className=\"Character-info\">\n        <h2>{name}</h2>\n        <p className=\"Actor\">{email}</p>\n      </div>\n    </div>\n  );\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {  \n  return (\n    <div className=\"white\">\n      {\n        robots.map((user, i) => {\n          return (\n            <Card \n            key={robots[i].id} \n            id={robots[i].id} \n            name={robots[i].character} \n            actor={robots[i].actor}\n            image={robots[i].image}\n            />\n          );\n        })\n      }\n    </div>\n);\n}\n\nexport default CardList;","import React from 'react';\nimport './Components.css';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa3\">\n      <input \n        className=\"pa3 ba b--near-black bg-dark-gray Search-characters\"\n        type=\"search\" \n        placeholder=\"Search Characters\" \n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","export const robots = [\n  {\n    id: 1,\n    character: 'Elliot Alderson',\n    image: \"/images/rami.jpg\",\n    actor: 'Rami Malek'\n  },\n  {\n    id: 2,\n    character: 'Mr. Robot',\n    image: \"/images/christian.jpg\",\n    actor: 'Christian Slater'\n  },\n  {\n    id: 3,\n    character: 'Darlene',\n    image: \"/images/darlene.jpg\",\n    actor: 'Carly Chaikin'\n  },\n  {\n    id: 4,\n    character: 'Tyrell Wellick',\n    image: \"/images/tyrell.jpg\",\n    actor: 'Martin WallstrÃ¶m'\n  },\n  {\n    id: 5,\n    character: 'Angela Moss',\n    image: \"/images/angela.jpg\",\n    actor: 'Portia Doubleday'\n  },\n  {\n    id: 6,\n    character: 'Phillip Price',\n    image: \"/images/phillip.jpg\",\n    actor: 'Michael Cristofer'\n  },\n  {\n    id: 7,\n    character: 'Dominique DiPierro',\n    image: \"/images/dominique.jpg\",\n    actor: 'Grace Gummer'\n  },\n  {\n    id: 8,\n    character: 'Whiterose',\n    image: \"/images/whiterose.jpg\",\n    actor: 'BD Wong'\n  },\n  {\n    id: 9,\n    character: 'Joanna Wellick',\n    image: \"/images/joanna.jpg\",\n    actor: 'Stephanie Corneliussen'\n  },\n  {\n    id: 10,\n    character: 'Elliot\\'s Mother',\n    image: \"/images/elliots-mom.jpg\",\n    actor: 'Vaishnavi Sharma'\n  }\n];\n","import React from 'react';\nimport './Components.css'\n\nconst Scroll = (props) => {\n  return (\n    <div className=\"Scroll-container\">\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops. Something went wrong.</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport { robots } from '../robots'\nimport { render } from 'react-dom';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n  \n  // componentDidMount() {\n  //   fetch('https://jsonplaceholder.typicode.com/users')\n  //     .then(response => {\n  //       return response.json();\n  //   })\n  //   .then(users => {\n  //     this.setState({ robots: users })\n  //   })\n  // }\n\n  componentDidMount() {\n    this.setState({ robots: robots });\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\n  }\n\n  render() {\n    const { robots, searchfield } = this.state;\n    const filterRobots = robots.filter(robot => {\n      return robot.character.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    return !robots.length ? \n    <h1 className=\"tc\">Loading...</h1> :\n    (\n      <div className=\"tc\">\n        <h1 className=\"f1\">Mr. Robot Characters</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filterRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render( <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}